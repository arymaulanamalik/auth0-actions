"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ajv_1 = __importDefault(require("ajv/lib/ajv"));
const client_1 = __importDefault(require("./client"));
const schema_1 = __importDefault(require("./schema"));
const handlers_1 = __importDefault(require("./handlers"));
function sortByOrder(toSort, stage) {
    const defaultOrder = 50;
    const sorted = [...toSort];
    sorted.sort((a, b) => {
        //@ts-ignore because this doesn't actually work. TODO: apply stage order
        const aOrder = a[stage].order || defaultOrder;
        //@ts-ignore because this doesn't actually work. TODO: apply stage order
        const bOrder = b[stage].order || defaultOrder;
        return aOrder - bOrder;
    });
    return sorted;
}
class Auth0 {
    constructor(client, assets, config) {
        this.client = (0, client_1.default)(client);
        this.config = config;
        this.assets = assets;
        this.handlers = Object.values(handlers_1.default)
            .map((handler) => {
            //@ts-ignore because class expects `type` property but gets directly injected into class constructors
            return new handler.default({ client: this.client, config: this.config });
        })
            .filter((handler) => {
            const excludedAssetTypes = config('AUTH0_EXCLUDED');
            if (excludedAssetTypes === undefined)
                return true;
            return !excludedAssetTypes.includes(handler.type);
        })
            .filter((handler) => {
            const onlyIncludedAssetTypes = config('AUTH0_INCLUDED_ONLY');
            if (onlyIncludedAssetTypes === undefined)
                return true;
            return onlyIncludedAssetTypes.includes(handler.type);
        });
    }
    runStage(stage) {
        return __awaiter(this, void 0, void 0, function* () {
            // Sort by priority
            for (const handler of sortByOrder(this.handlers, stage)) {
                // eslint-disable-line
                try {
                    const stageFn = Object.getPrototypeOf(handler)[stage];
                    this.assets = Object.assign(Object.assign({}, this.assets), ((yield stageFn.apply(handler, [this.assets])) || {}));
                }
                catch (err) {
                    err.type = handler.type;
                    err.stage = stage;
                    throw err;
                }
            }
        });
    }
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            const ajv = new ajv_1.default({ useDefaults: true, nullable: true });
            const nonNullAssets = Object.keys(this.assets)
                .filter((k) => this.assets[k] != null)
                .reduce((a, k) => (Object.assign(Object.assign({}, a), { [k]: this.assets[k] })), {});
            const valid = ajv.validate(schema_1.default, nonNullAssets);
            if (!valid) {
                throw new Error(`Schema validation failed loading ${JSON.stringify(ajv.errors, null, 4)}`);
            }
            yield this.runStage('validate');
        });
    }
    loadAssetsFromAuth0() {
        return __awaiter(this, void 0, void 0, function* () {
            // Populate assets from auth0 tenant
            yield this.runStage('load');
        });
    }
    processChanges() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.runStage('processChanges');
        });
    }
}
exports.default = Auth0;
//# sourceMappingURL=index.js.map