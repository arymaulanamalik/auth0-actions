"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.schema = void 0;
const default_1 = __importDefault(require("./default"));
exports.schema = { type: 'object' };
// The Management API requires the fields to be specified
const defaultFields = ['name', 'enabled', 'credentials', 'settings', 'default_from_address'];
class EmailProviderHandler extends default_1.default {
    constructor(options) {
        super(Object.assign(Object.assign({}, options), { type: 'emailProvider' }));
    }
    getType() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.client.emailProvider.get({ include_fields: true, fields: defaultFields });
            }
            catch (err) {
                if (err.statusCode === 404)
                    return {};
                throw err;
            }
        });
    }
    objString(provider) {
        return super.objString({ name: provider.name, enabled: provider.enabled });
    }
    processChanges(assets) {
        return __awaiter(this, void 0, void 0, function* () {
            const { emailProvider } = assets;
            if (!emailProvider)
                return;
            let existing = yield this.getType();
            if (Object.keys(emailProvider).length === 0) {
                if (this.config('AUTH0_ALLOW_DELETE') === true) {
                    yield this.client.emailProvider.delete();
                    this.didDelete(existing);
                }
                return;
            }
            if (existing.name) {
                if (existing.name !== emailProvider.name) {
                    // Delete the current provider as it's different
                    yield this.client.emailProvider.delete();
                    this.didDelete(existing);
                    existing = {};
                }
            }
            if (existing.name) {
                const provider = { name: emailProvider.name, enabled: emailProvider.enabled };
                const updated = yield this.client.emailProvider.update(provider, emailProvider);
                this.updated += 1;
                this.didUpdate(updated);
            }
            else {
                const provider = { name: emailProvider.name, enabled: emailProvider.enabled };
                const created = yield this.client.emailProvider.configure(provider, emailProvider);
                this.created += 1;
                this.didCreate(created);
            }
        });
    }
}
exports.default = EmailProviderHandler;
//# sourceMappingURL=emailProvider.js.map