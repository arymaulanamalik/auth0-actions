"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.schema = void 0;
const default_1 = __importStar(require("./default"));
const constants_1 = __importDefault(require("../../constants"));
const logger_1 = __importDefault(require("../../../logger"));
exports.schema = {
    type: 'object',
    properties: {
        templates: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    template: { type: 'string' },
                    body: { type: 'string' },
                },
            },
        },
    },
};
class BrandingHandler extends default_1.default {
    constructor(options) {
        super(Object.assign(Object.assign({}, options), { type: 'branding' }));
    }
    getType() {
        return __awaiter(this, void 0, void 0, function* () {
            let branding = {};
            try {
                // in case client version does not support branding
                if (this.client.branding && typeof this.client.branding.getSettings === 'function') {
                    branding = yield this.client.branding.getSettings();
                }
                // in case client version does not custom domains
                if (this.client.customDomains && typeof this.client.customDomains.getAll === 'function') {
                    const customDomains = yield this.client.customDomains.getAll();
                    // templates are only supported if there's custom domains.
                    if (customDomains && customDomains.length) {
                        const payload = yield this.client.branding.getUniversalLoginTemplate();
                        branding.templates = [
                            {
                                template: constants_1.default.UNIVERSAL_LOGIN_TEMPLATE,
                                body: payload.body,
                            },
                        ];
                    }
                }
                return branding;
            }
            catch (err) {
                logger_1.default.debug(`Error calling branding API, ${err.message}, status code: ${err.statusCode}`);
                if (err.statusCode === 403)
                    return branding;
                if (err.statusCode === 404)
                    return branding;
                if (err.statusCode === 501)
                    return branding;
                throw err;
            }
        });
    }
    processChanges(assets) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!assets.branding)
                return;
            const _a = assets.branding, { templates } = _a, brandingSettings = __rest(_a, ["templates"]);
            if (brandingSettings.logo_url === '') {
                //Sometimes blank logo_url returned by API but is invalid on import. See: DXCDT-240
                delete brandingSettings.logo_url;
            }
            if (brandingSettings && Object.keys(brandingSettings).length) {
                yield this.client.branding.updateSettings({}, brandingSettings);
                this.updated += 1;
                this.didUpdate(brandingSettings);
            }
            // handle templates
            if (templates && templates.length) {
                const unknownTemplates = templates
                    .filter((t) => !constants_1.default.SUPPORTED_BRANDING_TEMPLATES.includes(t.template))
                    .map((t) => t.template);
                if (unknownTemplates.length) {
                    // throw a helpful warning for unknown templates, the context handlers are unaware of which are supported, that's all handled here.
                    logger_1.default.warn(`Found unknown branding template(s): ${unknownTemplates
                        .join()
                        .toString()}. Supported branding templates are: ${constants_1.default.SUPPORTED_BRANDING_TEMPLATES.join()}.`);
                }
                const templateDefinition = templates.find((t) => t.template === constants_1.default.UNIVERSAL_LOGIN_TEMPLATE);
                if (templateDefinition && templateDefinition.body) {
                    yield this.client.branding.setUniversalLoginTemplate({}, { template: templateDefinition.body });
                    this.updated += 1;
                    this.didUpdate(templates);
                }
            }
        });
    }
}
__decorate([
    (0, default_1.order)('70') // Run after custom domains and themes.
], BrandingHandler.prototype, "processChanges", null);
exports.default = BrandingHandler;
//# sourceMappingURL=branding.js.map