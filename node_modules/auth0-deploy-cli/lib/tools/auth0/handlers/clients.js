"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.schema = void 0;
const default_1 = __importDefault(require("./default"));
exports.schema = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            name: { type: 'string', minLength: 1, pattern: '[^<>]+' },
        },
        required: ['name'],
    },
};
class ClientHandler extends default_1.default {
    constructor(config) {
        super(Object.assign(Object.assign({}, config), { type: 'clients', id: 'client_id', identifiers: ['client_id', 'name'], objectFields: ['client_metadata'], stripUpdateFields: [
                // Fields not allowed during updates
                'callback_url_template',
                'signing_keys',
                'global',
                'tenant',
                'jwt_configuration.secret_encoded',
            ] }));
    }
    objString(item) {
        return super.objString({ name: item.name, client_id: item.client_id });
    }
    processChanges(assets) {
        const _super = Object.create(null, {
            processChanges: { get: () => super.processChanges }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const { clients } = assets;
            // Do nothing if not set
            if (!clients)
                return;
            const excludedClients = (assets.exclude && assets.exclude.clients) || [];
            const { del, update, create, conflicts } = yield this.calcChanges(assets);
            // Always filter out the client we are using to access Auth0 Management API
            // As it could cause problems if it gets deleted or updated etc
            const currentClient = this.config('AUTH0_CLIENT_ID') || '';
            const filterClients = (list) => {
                if (excludedClients.length) {
                    return list.filter((item) => item.client_id !== currentClient && !excludedClients.includes(item.name));
                }
                return list.filter((item) => item.client_id !== currentClient);
            };
            const changes = {
                del: filterClients(del),
                update: filterClients(update),
                create: filterClients(create),
                conflicts: filterClients(conflicts),
            };
            yield _super.processChanges.call(this, assets, Object.assign({}, changes));
        });
    }
    getType() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.existing)
                return this.existing;
            this.existing = yield this.client.clients.getAll({
                paginate: true,
                include_totals: true,
                is_global: false,
            });
            return this.existing;
        });
    }
}
exports.default = ClientHandler;
//# sourceMappingURL=clients.js.map