"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.schema = void 0;
const default_1 = __importDefault(require("./default"));
const constants_1 = __importDefault(require("../../constants"));
const mappings = Object.entries(constants_1.default.GUARDIAN_FACTOR_PROVIDERS).reduce((accum, [name, providers]) => {
    providers.forEach((p) => {
        accum.push({ name, provider: p });
    });
    return accum;
}, []);
exports.schema = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            name: { type: 'string', enum: constants_1.default.GUARDIAN_FACTORS },
            provider: { type: 'string', enum: mappings.map((p) => p.provider) },
        },
        required: ['name', 'provider'],
    },
};
class GuardianFactorProvidersHandler extends default_1.default {
    constructor(options) {
        super(Object.assign(Object.assign({}, options), { type: 'guardianFactorProviders', id: 'name' }));
    }
    getType() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.existing)
                return this.existing;
            const data = yield Promise.all(mappings.map((m) => __awaiter(this, void 0, void 0, function* () {
                const provider = yield this.client.guardian.getFactorProvider(m);
                return Object.assign(Object.assign({}, m), provider);
            })));
            // Filter out empty, should have more then 2 keys (name, provider)
            return data.filter((d) => Object.keys(d).length > 2);
        });
    }
    processChanges(assets) {
        return __awaiter(this, void 0, void 0, function* () {
            // No API to delete or create guardianFactorProviders, we can only update.
            const { guardianFactorProviders } = assets;
            // Do nothing if not set
            if (!guardianFactorProviders || !guardianFactorProviders.length)
                return;
            // Process each factor
            yield Promise.all(guardianFactorProviders.map((factorProvider) => __awaiter(this, void 0, void 0, function* () {
                const data = Object.assign({}, factorProvider);
                const params = { name: factorProvider.name, provider: factorProvider.provider };
                delete data.name;
                delete data.provider;
                yield this.client.guardian.updateFactorProvider(params, data);
                this.didUpdate(params);
                this.updated += 1;
            })));
        });
    }
}
exports.default = GuardianFactorProvidersHandler;
//# sourceMappingURL=guardianFactorProviders.js.map