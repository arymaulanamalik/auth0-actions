"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.schema = void 0;
const default_1 = __importDefault(require("./default"));
exports.schema = {
    type: 'object',
    properties: {
        breachedPasswordDetection: {
            type: 'object',
        },
        bruteForceProtection: {
            type: 'object',
        },
        suspiciousIpThrottling: {
            type: 'object',
        },
    },
    additionalProperties: false,
};
class AttackProtectionHandler extends default_1.default {
    constructor(config) {
        super(Object.assign(Object.assign({}, config), { type: 'attackProtection' }));
    }
    objString(item) {
        const objectString = (() => {
            var _a, _b, _c;
            let obj = {};
            if ((_a = item.breachedPasswordDetection) === null || _a === void 0 ? void 0 : _a.enabled) {
                obj['breached-password-protection'] = {
                    enabled: item.breachedPasswordDetection.enabled,
                };
            }
            if ((_b = item.bruteForceProtection) === null || _b === void 0 ? void 0 : _b.enabled) {
                obj['brute-force-protection'] = {
                    enabled: item.bruteForceProtection.enabled,
                };
            }
            if ((_c = item.suspiciousIpThrottling) === null || _c === void 0 ? void 0 : _c.enabled) {
                obj['suspicious-ip-throttling'] = {
                    enabled: item.suspiciousIpThrottling.enabled,
                };
            }
            return obj;
        })();
        return super.objString(objectString);
    }
    getType() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.existing) {
                return this.existing;
            }
            const [breachedPasswordDetection, bruteForceProtection, suspiciousIpThrottling] = yield Promise.all([
                this.client.attackProtection.getBreachedPasswordDetectionConfig(),
                this.client.attackProtection.getBruteForceConfig(),
                this.client.attackProtection.getSuspiciousIpThrottlingConfig(),
            ]);
            this.existing = {
                breachedPasswordDetection,
                bruteForceProtection,
                suspiciousIpThrottling,
            };
            return this.existing;
        });
    }
    processChanges(assets) {
        return __awaiter(this, void 0, void 0, function* () {
            const { attackProtection } = assets;
            if (!attackProtection || !Object.keys(attackProtection).length) {
                return;
            }
            Promise.all([
                this.client.attackProtection.updateBreachedPasswordDetectionConfig({}, attackProtection.breachedPasswordDetection),
                this.client.attackProtection.updateSuspiciousIpThrottlingConfig({}, attackProtection.suspiciousIpThrottling),
                this.client.attackProtection.updateBruteForceConfig({}, attackProtection.bruteForceProtection),
            ]);
            this.updated += 1;
            this.didUpdate(attackProtection);
        });
    }
}
exports.default = AttackProtectionHandler;
//# sourceMappingURL=attackProtection.js.map