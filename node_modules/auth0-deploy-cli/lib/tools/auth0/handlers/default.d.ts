import { Asset, Assets, Auth0APIClient, CalculatedChanges } from '../../../types';
import { ConfigFunction } from '../../../configFactory';
export declare function order(value: any): (t: any, n: any, descriptor: any) => any;
type ApiMethodOverride = string | Function;
export default class APIHandler {
    config: ConfigFunction;
    id: string;
    type: string;
    updated: number;
    created: number;
    deleted: number;
    existing: null | Asset | Asset[];
    client: Auth0APIClient;
    identifiers: string[];
    objectFields: string[];
    sensitiveFieldsToObfuscate: string[];
    stripUpdateFields: string[];
    stripCreateFields: string[];
    name?: string;
    functions: {
        getAll: ApiMethodOverride;
        update: ApiMethodOverride;
        create: ApiMethodOverride;
        delete: ApiMethodOverride;
    };
    constructor(options: {
        id?: APIHandler['id'];
        config: ConfigFunction;
        type: APIHandler['type'];
        client: Auth0APIClient;
        objectFields?: APIHandler['objectFields'];
        identifiers?: APIHandler['identifiers'];
        stripUpdateFields?: APIHandler['stripUpdateFields'];
        sensitiveFieldsToObfuscate?: APIHandler['sensitiveFieldsToObfuscate'];
        stripCreateFields?: APIHandler['stripCreateFields'];
        functions: {
            getAll?: ApiMethodOverride;
            update?: ApiMethodOverride;
            create?: ApiMethodOverride;
            delete?: ApiMethodOverride;
        };
    });
    getClientFN(fn: ApiMethodOverride): Function;
    didDelete(item: Asset): void;
    didCreate(item: Asset): void;
    didUpdate(item: Asset): void;
    objString(item: Asset): string;
    getType(): Promise<Asset | Asset[] | null>;
    load(): Promise<{
        [key: string]: Asset | Asset[] | null;
    }>;
    calcChanges(assets: Assets): Promise<CalculatedChanges>;
    validate(assets: Assets): Promise<void>;
    processChanges(assets: Assets, changes: CalculatedChanges): Promise<void>;
}
export {};
