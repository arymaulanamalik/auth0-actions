"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.schema = void 0;
const default_1 = __importStar(require("./default"));
const constants_1 = __importDefault(require("../../constants"));
const utils_1 = require("../../utils");
exports.schema = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            strategy: { type: 'string', enum: ['auth0'], default: 'auth0' },
            name: { type: 'string' },
            options: {
                type: 'object',
                properties: {
                    customScripts: {
                        type: 'object',
                        properties: Object.assign({}, constants_1.default.DATABASE_SCRIPTS.reduce((o, script) => (Object.assign(Object.assign({}, o), { [script]: { type: 'string' } })), {})),
                    },
                },
            },
        },
        required: ['name'],
    },
};
class DatabaseHandler extends default_1.default {
    constructor(config) {
        super(Object.assign(Object.assign({}, config), { type: 'databases', stripUpdateFields: ['strategy', 'name'] }));
    }
    objString(db) {
        return super.objString({ name: db.name, id: db.id });
    }
    getClientFN(fn) {
        // Override this as a database is actually a connection but we are treating them as a different object
        // If we going to update database, we need to get current options first
        if (fn === 'update') {
            return (params, payload) => this.client.connections.get(params).then((connection) => {
                payload.options = Object.assign(Object.assign({}, connection.options), payload.options);
                return this.client.connections.update(params, payload);
            });
        }
        return this.client.connections[fn].bind(this.client.connections);
    }
    getType() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.existing)
                return this.existing;
            this.existing = this.client.connections.getAll({
                strategy: 'auth0',
                paginate: true,
                include_totals: true,
            });
            return this.existing;
        });
    }
    calcChanges(assets) {
        const _super = Object.create(null, {
            calcChanges: { get: () => super.calcChanges }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const { databases } = assets;
            // Do nothing if not set
            if (!databases)
                return {
                    del: [],
                    create: [],
                    update: [],
                    conflicts: [],
                };
            // Convert enabled_clients by name to the id
            const clients = yield this.client.clients.getAll({ paginate: true, include_totals: true });
            const existingDatabasesConnections = yield this.client.connections.getAll({
                strategy: 'auth0',
                paginate: true,
                include_totals: true,
            });
            const formatted = databases.map((db) => {
                if (db.enabled_clients) {
                    return Object.assign(Object.assign({}, db), { enabled_clients: (0, utils_1.getEnabledClients)(assets, db, existingDatabasesConnections, clients) });
                }
                return db;
            });
            return _super.calcChanges.call(this, Object.assign(Object.assign({}, assets), { databases: formatted }));
        });
    }
    // Run after clients are updated so we can convert all the enabled_clients names to id's
    processChanges(assets) {
        const _super = Object.create(null, {
            processChanges: { get: () => super.processChanges }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const { databases } = assets;
            // Do nothing if not set
            if (!databases)
                return;
            const excludedConnections = (assets.exclude && assets.exclude.databases) || [];
            const changes = yield this.calcChanges(assets);
            yield _super.processChanges.call(this, assets, (0, utils_1.filterExcluded)(changes, excludedConnections));
        });
    }
}
__decorate([
    (0, default_1.order)('60')
], DatabaseHandler.prototype, "processChanges", null);
exports.default = DatabaseHandler;
//# sourceMappingURL=databases.js.map