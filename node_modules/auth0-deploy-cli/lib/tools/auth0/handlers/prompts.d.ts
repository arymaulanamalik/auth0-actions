import DefaultHandler from './default';
import { Assets, Language } from '../../../types';
declare const promptTypes: readonly ["login", "login-id", "login-password", "login-email-verification", "signup", "signup-id", "signup-password", "reset-password", "consent", "mfa-push", "mfa-otp", "mfa-voice", "mfa-phone", "mfa-webauthn", "mfa-sms", "mfa-email", "mfa-recovery-code", "mfa", "status", "device-flow", "email-verification", "email-otp-challenge", "organizations", "invitation", "common"];
export type PromptTypes = typeof promptTypes[number];
declare const screenTypes: readonly ["login", "login-id", "login-password", "login-email-verification", "signup", "signup-id", "signup-password", "reset-password-request", "reset-password-email", "reset-password", "reset-password-success", "reset-password-error", "consent", "status", "mfa-detect-browser-capabilities", "mfa-enroll-result", "mfa-login-options", "mfa-begin-enroll-options", "mfa-otp-enrollment-qr", "mfa-otp-enrollment-code", "mfa-otp-challenge", "mfa-voice-challenge", "mfa-sms-challenge", "mfa-recovery-code-enrollment", "mfa-recovery-code-challenge", "mfa-country-codes", "mfa-sms-enrollment", "mfa-voice-enrollment", "mfa-phone-challenge", "mfa-phone-enrollment", "mfa-webauthn-roaming-enrollment", "mfa-webauthn-platform-enrollment", "mfa-webauthn-platform-challenge", "mfa-webauthn-roaming-challenge", "mfa-webauthn-change-key-nickname", "mfa-webauthn-enrollment-success", "mfa-webauthn-error", "mfa-webauthn-not-available-error", "mfa-sms-list", "mfa-email-challenge", "mfa-email-list", "mfa-push-welcome", "mfa-push-list", "mfa-push-enrollment-qr", "mfa-push-enrollment-code", "mfa-push-success", "mfa-push-challenge-push", "device-code-activation", "device-code-activation-allowed", "device-code-activation-denied", "device-code-confirmation", "email-verification-result", "email-otp-challenge", "redeem-ticket", "organization-selection", "accept-invitation"];
export type ScreenTypes = typeof screenTypes[number];
export declare const schema: {
    type: string;
    properties: {
        universal_login_experience: {
            type: string;
            enum: string[];
        };
        webauthn_platform_first_factor: {
            type: string;
        };
        identifier_first: {
            type: string;
        };
        customText: {
            type: string;
            properties: {};
        };
    };
};
export type PromptSettings = {
    universal_login_experience?: 'new' | 'classic';
    webauthn_platform_first_factor?: boolean;
    identifier_first?: boolean;
};
export type PromptsCustomText = {
    [key in PromptTypes]: Partial<{
        [key in ScreenTypes]: {
            [key: string]: string;
        };
    }>;
};
export type Prompts = Partial<PromptSettings & {
    customText: AllPromptsByLanguage;
}>;
export type AllPromptsByLanguage = Partial<{
    [key in Language]: Partial<PromptsCustomText>;
}>;
export default class PromptsHandler extends DefaultHandler {
    existing: Prompts;
    constructor(options: DefaultHandler);
    objString({ customText }: Prompts): string;
    getType(): Promise<Prompts | null>;
    getCustomTextSettings(): Promise<AllPromptsByLanguage>;
    processChanges(assets: Assets): Promise<void>;
    updateCustomTextSettings(customText: Prompts['customText']): Promise<void>;
}
export {};
