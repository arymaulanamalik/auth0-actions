"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.schema = void 0;
const default_1 = __importDefault(require("./default"));
const logger_1 = __importDefault(require("../../../logger"));
const utils_1 = require("../../utils");
exports.schema = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            key: { type: 'string', pattern: '^[A-Za-z0-9_-]*$' },
            value: { type: 'string' },
        },
        required: ['key', 'value'],
    },
    additionalProperties: false,
};
class RulesConfigsHandler extends default_1.default {
    constructor(options) {
        super(Object.assign(Object.assign({}, options), { type: 'rulesConfigs', id: 'key', functions: {
                update: 'set', // Update or Creation of a ruleConfig is via set not update
            } }));
    }
    getType() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return this.client.rulesConfigs.getAll();
            }
            catch (err) {
                if ((0, utils_1.isDeprecatedError)(err))
                    return null;
                throw err;
            }
        });
    }
    objString(item) {
        return super.objString({ key: item.key });
    }
    calcChanges(assets) {
        return __awaiter(this, void 0, void 0, function* () {
            const { rulesConfigs } = assets;
            // Do nothing if not set
            if (!rulesConfigs || !rulesConfigs.length)
                return {
                    del: [],
                    update: [],
                    create: [],
                    conflicts: [],
                };
            logger_1.default.warn('Rules are deprecated, migrate to using actions instead. See: https://auth0.com/docs/customize/actions/migrate/migrate-from-rules-to-actions for more information.');
            // Intention is to not delete/cleanup old configRules, that needs to be handled manually.
            return {
                del: [],
                update: rulesConfigs,
                create: [],
                conflicts: [],
            };
        });
    }
}
exports.default = RulesConfigsHandler;
//# sourceMappingURL=rulesConfigs.js.map