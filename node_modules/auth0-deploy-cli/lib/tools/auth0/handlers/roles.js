"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.schema = void 0;
const default_1 = __importStar(require("./default"));
const calculateChanges_1 = require("../../calculateChanges");
const logger_1 = __importDefault(require("../../../logger"));
exports.schema = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            name: { type: 'string' },
            id: { type: 'string' },
            description: { type: 'string' },
            permissions: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        permission_name: { type: 'string' },
                        resource_server_identifier: { type: 'string' },
                    },
                },
            },
        },
        required: ['name'],
    },
};
class RolesHandler extends default_1.default {
    constructor(config) {
        super(Object.assign(Object.assign({}, config), { type: 'roles', id: 'id' }));
    }
    createRole(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const role = Object.assign({}, data);
            delete role.permissions;
            const created = yield this.client.roles.create(role);
            if (typeof data.permissions !== 'undefined' && data.permissions.length > 0) {
                yield this.client.roles.permissions.create({ id: created.id }, { permissions: data.permissions });
            }
            return created;
        });
    }
    createRoles(creates) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.pool
                .addEachTask({
                data: creates || [],
                generator: (item) => this.createRole(item)
                    .then((data) => {
                    this.didCreate(data);
                    this.created += 1;
                })
                    .catch((err) => {
                    throw new Error(`Problem creating ${this.type} ${this.objString(item)}\n${err}`);
                }),
            })
                .promise();
        });
    }
    deleteRole(data) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.roles.delete({ id: data.id });
        });
    }
    deleteRoles(dels) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.config('AUTH0_ALLOW_DELETE') === 'true' ||
                this.config('AUTH0_ALLOW_DELETE') === true) {
                yield this.client.pool
                    .addEachTask({
                    data: dels || [],
                    generator: (item) => this.deleteRole(item)
                        .then(() => {
                        this.didDelete(item);
                        this.deleted += 1;
                    })
                        .catch((err) => {
                        throw new Error(`Problem deleting ${this.type} ${this.objString(item)}\n${err}`);
                    }),
                })
                    .promise();
            }
            else {
                logger_1.default.warn(`Detected the following roles should be deleted. Doing so may be destructive.\nYou can enable deletes by setting 'AUTH0_ALLOW_DELETE' to true in the config
      \n${dels.map((i) => this.objString(i)).join('\n')}`);
            }
        });
    }
    updateRole(data, roles) {
        return __awaiter(this, void 0, void 0, function* () {
            const existingRole = yield roles.find((roleDataForUpdate) => roleDataForUpdate.name === data.name);
            const params = { id: data.id };
            const newPermissions = data.permissions;
            delete data.permissions;
            delete data.id;
            yield this.client.roles.update(params, data);
            if (typeof existingRole.permissions !== 'undefined' && existingRole.permissions.length > 0) {
                yield this.client.roles.permissions.delete(params, { permissions: existingRole.permissions });
            }
            if (typeof newPermissions !== 'undefined' && newPermissions.length > 0) {
                yield this.client.roles.permissions.create(params, { permissions: newPermissions });
            }
            return params;
        });
    }
    updateRoles(updates, roles) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.pool
                .addEachTask({
                data: updates || [],
                generator: (item) => this.updateRole(item, roles)
                    .then((data) => {
                    this.didUpdate(data);
                    this.updated += 1;
                })
                    .catch((err) => {
                    throw new Error(`Problem updating ${this.type} ${this.objString(item)}\n${err}`);
                }),
            })
                .promise();
        });
    }
    getType() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.existing) {
                return this.existing;
            }
            // in case client version does not support roles
            if (!this.client.roles || typeof this.client.roles.getAll !== 'function') {
                return [];
            }
            try {
                const roles = yield this.client.roles.getAll({ paginate: true, include_totals: true });
                for (let index = 0; index < roles.length; index++) {
                    const permissions = yield this.client.roles.permissions.getAll({
                        paginate: true,
                        include_totals: true,
                        id: roles[index].id,
                    });
                    const strippedPerms = yield Promise.all(permissions.map((permission) => __awaiter(this, void 0, void 0, function* () {
                        delete permission.resource_server_name;
                        delete permission.description;
                        return permission;
                    })));
                    roles[index].permissions = strippedPerms;
                }
                this.existing = roles;
                return this.existing;
            }
            catch (err) {
                if (err.statusCode === 404 || err.statusCode === 501) {
                    return [];
                }
                throw err;
            }
        });
    }
    processChanges(assets) {
        return __awaiter(this, void 0, void 0, function* () {
            const { roles } = assets;
            // Do nothing if not set
            if (!roles)
                return;
            // Gets roles from destination tenant
            const existing = yield this.getType();
            const changes = (0, calculateChanges_1.calculateChanges)({
                handler: this,
                assets: roles,
                existing,
                identifiers: this.identifiers,
                allowDelete: !!this.config('AUTH0_ALLOW_DELETE'),
            });
            logger_1.default.debug(`Start processChanges for roles [delete:${changes.del.length}] [update:${changes.update.length}], [create:${changes.create.length}]`);
            const myChanges = [
                { del: changes.del },
                { create: changes.create },
                { update: changes.update },
            ];
            yield Promise.all(myChanges.map((change) => __awaiter(this, void 0, void 0, function* () {
                switch (true) {
                    case change.del && change.del.length > 0:
                        if (change.del)
                            yield this.deleteRoles(change.del);
                        break;
                    case change.create && change.create.length > 0:
                        yield this.createRoles(changes.create); //TODO: fix this tho change.create
                        break;
                    case change.update && change.update.length > 0:
                        if (change.update)
                            yield this.updateRoles(change.update, existing);
                        break;
                    default:
                        break;
                }
            })));
        });
    }
}
__decorate([
    (0, default_1.order)('60')
], RolesHandler.prototype, "processChanges", null);
exports.default = RolesHandler;
//# sourceMappingURL=roles.js.map