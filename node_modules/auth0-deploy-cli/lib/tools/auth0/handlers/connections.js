"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addExcludedConnectionPropertiesToChanges = exports.schema = void 0;
const dot_prop_1 = __importDefault(require("dot-prop"));
const lodash_1 = __importDefault(require("lodash"));
const default_1 = __importStar(require("./default"));
const utils_1 = require("../../utils");
exports.schema = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            name: { type: 'string' },
            strategy: { type: 'string' },
            options: { type: 'object' },
            enabled_clients: { type: 'array', items: { type: 'string' } },
            realms: { type: 'array', items: { type: 'string' } },
            metadata: { type: 'object' },
        },
        required: ['name', 'strategy'],
    },
};
// addExcludedConnectionPropertiesToChanges superimposes excluded properties on the `options` object. The Auth0 API
// will overwrite the options property when updating connections, so it is necessary to add excluded properties back in to prevent those excluded properties from being deleted.
// This use case is common because organizations may not want to expose sensitive connection details, but want to preserve them in the tenant.
// exported only for unit testing purposes
const addExcludedConnectionPropertiesToChanges = ({ proposedChanges, existingConnections, config, }) => {
    var _a, _b;
    if (proposedChanges.update.length === 0)
        return proposedChanges;
    //@ts-ignore because this expects a parameter to be passed
    const excludedFields = ((_b = (_a = config()) === null || _a === void 0 ? void 0 : _a.EXCLUDED_PROPS) === null || _b === void 0 ? void 0 : _b.connections) || [];
    if (excludedFields.length === 0)
        return proposedChanges;
    const existingConnectionsMap = lodash_1.default.keyBy(existingConnections, 'id');
    const excludedOptions = excludedFields.filter(
    // Only include fields that pertain to options
    (excludedField) => excludedField.startsWith('options'));
    const newProposedUpdates = proposedChanges.update.map((proposedConnection) => {
        const currConnection = existingConnectionsMap[proposedConnection.id];
        const currentExcludedPropertyValues = excludedOptions.reduce((agg, excludedField) => {
            if (!dot_prop_1.default.has(currConnection, excludedField))
                return agg;
            const currentExcludedFieldValue = dot_prop_1.default.get(currConnection, excludedField);
            dot_prop_1.default.set(agg, excludedField, currentExcludedFieldValue);
            return agg;
        }, {
            options: {},
        });
        return Object.assign(Object.assign({}, proposedConnection), { options: Object.assign(Object.assign({}, proposedConnection.options), currentExcludedPropertyValues.options) });
    });
    return Object.assign(Object.assign({}, proposedChanges), { update: newProposedUpdates });
};
exports.addExcludedConnectionPropertiesToChanges = addExcludedConnectionPropertiesToChanges;
class ConnectionsHandler extends default_1.default {
    constructor(config) {
        super(Object.assign(Object.assign({}, config), { type: 'connections', stripUpdateFields: ['strategy', 'name'] }));
    }
    objString(connection) {
        return super.objString({ name: connection.name, id: connection.id });
    }
    getFormattedOptions(connection, clients) {
        try {
            return {
                options: Object.assign(Object.assign({}, connection.options), { idpinitiated: Object.assign(Object.assign({}, connection.options.idpinitiated), { client_id: (0, utils_1.convertClientNameToId)(connection.options.idpinitiated.client_id, clients) }) }),
            };
        }
        catch (e) {
            return {};
        }
    }
    getType() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.existing)
                return this.existing;
            const connections = yield this.client.connections.getAll({
                paginate: true,
                include_totals: true,
            });
            // Filter out database connections
            this.existing = connections.filter((c) => c.strategy !== 'auth0');
            if (this.existing === null)
                return [];
            return this.existing;
        });
    }
    calcChanges(assets) {
        const _super = Object.create(null, {
            calcChanges: { get: () => super.calcChanges }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const { connections } = assets;
            // Do nothing if not set
            if (!connections)
                return {
                    del: [],
                    create: [],
                    update: [],
                    conflicts: [],
                };
            // Convert enabled_clients by name to the id
            const clients = yield this.client.clients.getAll({ paginate: true, include_totals: true });
            const existingConnections = yield this.client.connections.getAll({
                paginate: true,
                include_totals: true,
            });
            const formatted = connections.map((connection) => (Object.assign(Object.assign(Object.assign({}, connection), this.getFormattedOptions(connection, clients)), { enabled_clients: (0, utils_1.getEnabledClients)(assets, connection, existingConnections, clients) })));
            const proposedChanges = yield _super.calcChanges.call(this, Object.assign(Object.assign({}, assets), { connections: formatted }));
            const proposedChangesWithExcludedProperties = (0, exports.addExcludedConnectionPropertiesToChanges)({
                proposedChanges,
                existingConnections,
                config: this.config,
            });
            return proposedChangesWithExcludedProperties;
        });
    }
    // Run after clients are updated so we can convert all the enabled_clients names to id's
    processChanges(assets) {
        const _super = Object.create(null, {
            processChanges: { get: () => super.processChanges }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const { connections } = assets;
            // Do nothing if not set
            if (!connections)
                return;
            const excludedConnections = (assets.exclude && assets.exclude.connections) || [];
            const changes = yield this.calcChanges(assets);
            yield _super.processChanges.call(this, assets, (0, utils_1.filterExcluded)(changes, excludedConnections));
        });
    }
}
__decorate([
    (0, default_1.order)('60')
], ConnectionsHandler.prototype, "processChanges", null);
exports.default = ConnectionsHandler;
//# sourceMappingURL=connections.js.map