"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.schema = exports.excludeSchema = void 0;
const validationError_1 = __importDefault(require("../../validationError"));
const constants_1 = __importDefault(require("../../constants"));
const default_1 = __importDefault(require("./default"));
const calculateChanges_1 = require("../../calculateChanges");
exports.excludeSchema = {
    type: 'array',
    items: { type: 'string' },
};
exports.schema = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            name: { type: 'string' },
            identifier: { type: 'string' },
            scopes: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        name: { type: 'string' },
                        description: { type: 'string' },
                    },
                },
            },
            enforce_policies: { type: 'boolean' },
            token_dialect: { type: 'string' },
        },
        required: ['name', 'identifier'],
    },
};
class ResourceServersHandler extends default_1.default {
    constructor(options) {
        super(Object.assign(Object.assign({}, options), { type: 'resourceServers', identifiers: ['id', 'identifier'], stripUpdateFields: ['identifier'] }));
    }
    objString(resourceServer) {
        return super.objString({ name: resourceServer.name, identifier: resourceServer.identifier });
    }
    getType() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.existing)
                return this.existing;
            const resourceServers = yield this.client.resourceServers.getAll({
                paginate: true,
                include_totals: true,
            });
            return resourceServers.filter((rs) => rs.name !== constants_1.default.RESOURCE_SERVERS_MANAGEMENT_API_NAME);
        });
    }
    calcChanges(assets) {
        return __awaiter(this, void 0, void 0, function* () {
            let { resourceServers } = assets;
            // Do nothing if not set
            if (!resourceServers)
                return {
                    del: [],
                    create: [],
                    conflicts: [],
                    update: [],
                };
            const excluded = (assets.exclude && assets.exclude.resourceServers) || [];
            let existing = yield this.getType();
            // Filter excluded
            resourceServers = resourceServers.filter((r) => !excluded.includes(r.name));
            existing = existing.filter((r) => !excluded.includes(r.name));
            return (0, calculateChanges_1.calculateChanges)({
                handler: this,
                assets: resourceServers,
                existing,
                identifiers: this.identifiers,
                allowDelete: !!this.config('AUTH0_ALLOW_DELETE'),
            });
        });
    }
    validate(assets) {
        const _super = Object.create(null, {
            validate: { get: () => super.validate }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const { resourceServers } = assets;
            // Do nothing if not set
            if (!resourceServers)
                return;
            const mgmtAPIResource = resourceServers.find((r) => r.name === constants_1.default.RESOURCE_SERVERS_MANAGEMENT_API_NAME);
            if (mgmtAPIResource) {
                throw new validationError_1.default(`You can not configure the '${constants_1.default.RESOURCE_SERVERS_MANAGEMENT_API_NAME}'.`);
            }
            yield _super.validate.call(this, assets);
        });
    }
}
exports.default = ResourceServersHandler;
//# sourceMappingURL=resourceServers.js.map