"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.schema = void 0;
const default_1 = __importStar(require("./default"));
const utils_1 = require("../../utils");
exports.schema = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            client_id: { type: 'string' },
            audience: { type: 'string' },
            scope: {
                type: 'array',
                items: { type: 'string' },
                uniqueItems: true,
            },
        },
        required: ['client_id', 'scope', 'audience'],
    },
};
class ClientGrantsHandler extends default_1.default {
    constructor(config) {
        super(Object.assign(Object.assign({}, config), { type: 'clientGrants', id: 'id', 
            //@ts-ignore because not sure why two-dimensional array passed in
            identifiers: ['id', ['client_id', 'audience']], stripUpdateFields: ['audience', 'client_id'] }));
    }
    objString(item) {
        return super.objString({ id: item.id, client_id: item.client_id, audience: item.audience });
    }
    getType() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.existing) {
                return this.existing;
            }
            this.existing = yield this.client.clientGrants.getAll({ paginate: true, include_totals: true });
            // Always filter out the client we are using to access Auth0 Management API
            // As it could cause problems if the grants are deleted or updated etc
            const currentClient = this.config('AUTH0_CLIENT_ID');
            this.existing = this.existing.filter((grant) => grant.client_id !== currentClient);
            return this.existing;
        });
    }
    // Run after clients are updated so we can convert client_id names to id's
    processChanges(assets) {
        const _super = Object.create(null, {
            processChanges: { get: () => super.processChanges }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const { clientGrants } = assets;
            // Do nothing if not set
            if (!clientGrants)
                return;
            const clients = yield this.client.clients.getAll({ paginate: true, include_totals: true });
            const excludedClientsByNames = (assets.exclude && assets.exclude.clients) || [];
            const excludedClients = (0, utils_1.convertClientNamesToIds)(excludedClientsByNames, clients);
            // Convert clients by name to the id
            const formatted = clientGrants.map((clientGrant) => {
                const grant = Object.assign({}, clientGrant);
                const found = clients.find((c) => c.name === grant.client_id);
                if (found)
                    grant.client_id = found.client_id;
                return grant;
            });
            // Always filter out the client we are using to access Auth0 Management API
            const currentClient = this.config('AUTH0_CLIENT_ID');
            const { del, update, create, conflicts } = yield this.calcChanges(Object.assign(Object.assign({}, assets), { clientGrants: formatted }));
            const filterGrants = (list) => {
                if (excludedClients.length) {
                    return list.filter((item) => item.client_id !== currentClient &&
                        ![...excludedClientsByNames, ...excludedClients].includes(item.client_id));
                }
                return list.filter((item) => item.client_id !== currentClient);
            };
            const changes = {
                //@ts-ignore because this expects `client_id` and that's not yet typed on Asset
                del: filterGrants(del),
                //@ts-ignore because this expects `client_id` and that's not yet typed on Asset
                update: filterGrants(update),
                //@ts-ignore because this expects `client_id` and that's not yet typed on Asset
                create: filterGrants(create),
                //@ts-ignore because this expects `client_id` and that's not yet typed on Asset
                conflicts: filterGrants(conflicts),
            };
            yield _super.processChanges.call(this, assets, Object.assign({}, changes));
        });
    }
}
__decorate([
    (0, default_1.order)('60')
], ClientGrantsHandler.prototype, "processChanges", null);
exports.default = ClientGrantsHandler;
//# sourceMappingURL=clientGrants.js.map