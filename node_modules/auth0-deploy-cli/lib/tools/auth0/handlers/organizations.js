"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.schema = void 0;
const lodash_1 = __importDefault(require("lodash"));
const default_1 = __importStar(require("./default"));
const calculateChanges_1 = require("../../calculateChanges");
const logger_1 = __importDefault(require("../../../logger"));
exports.schema = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            name: { type: 'string' },
            display_name: { type: 'string' },
            branding: { type: 'object' },
            metadata: { type: 'object' },
            connections: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        connection_id: { type: 'string' },
                        assign_membership_on_login: { type: 'boolean' },
                    },
                },
            },
        },
        required: ['name'],
    },
};
class OrganizationsHandler extends default_1.default {
    constructor(config) {
        super(Object.assign(Object.assign({}, config), { type: 'organizations', id: 'id' }));
    }
    deleteOrganization(org) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.organizations.delete({ id: org.id });
        });
    }
    deleteOrganizations(data) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.config('AUTH0_ALLOW_DELETE') === 'true' ||
                this.config('AUTH0_ALLOW_DELETE') === true) {
                yield this.client.pool
                    .addEachTask({
                    data: data || [],
                    generator: (item) => this.deleteOrganization(item)
                        .then(() => {
                        this.didDelete(item);
                        this.deleted += 1;
                    })
                        .catch((err) => {
                        throw new Error(`Problem deleting ${this.type} ${this.objString(item)}\n${err}`);
                    }),
                })
                    .promise();
            }
            else {
                logger_1.default.warn(`Detected the following organizations should be deleted. Doing so may be destructive.\nYou can enable deletes by setting 'AUTH0_ALLOW_DELETE' to true in the config
      \n${data.map((i) => this.objString(i)).join('\n')}`);
            }
        });
    }
    createOrganization(org) {
        return __awaiter(this, void 0, void 0, function* () {
            const organization = Object.assign({}, org);
            delete organization.connections;
            const created = yield this.client.organizations.create(organization);
            if (typeof org.connections !== 'undefined' && org.connections.length > 0) {
                yield Promise.all(org.connections.map((conn) => this.client.organizations.addEnabledConnection({ id: created.id }, conn)));
            }
            return created;
        });
    }
    createOrganizations(creates) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.pool
                .addEachTask({
                data: creates || [],
                generator: (item) => this.createOrganization(item)
                    .then((data) => {
                    this.didCreate(data);
                    this.created += 1;
                })
                    .catch((err) => {
                    throw new Error(`Problem creating ${this.type} ${this.objString(item)}\n${err}`);
                }),
            })
                .promise();
        });
    }
    updateOrganization(org, organizations) {
        return __awaiter(this, void 0, void 0, function* () {
            const { connections: existingConnections } = yield organizations.find((orgToUpdate) => orgToUpdate.name === org.name);
            const params = { id: org.id };
            const { connections } = org;
            delete org.connections;
            delete org.name;
            delete org.id;
            yield this.client.organizations.update(params, org);
            const connectionsToRemove = existingConnections.filter((c) => !connections.find((x) => x.connection_id === c.connection_id));
            const connectionsToAdd = connections.filter((c) => !existingConnections.find((x) => x.connection_id === c.connection_id));
            const connectionsToUpdate = connections.filter((c) => existingConnections.find((x) => x.connection_id === c.connection_id &&
                x.assign_membership_on_login !== c.assign_membership_on_login));
            // Handle updates first
            yield Promise.all(connectionsToUpdate.map((conn) => this.client.organizations
                .updateEnabledConnection(Object.assign({ connection_id: conn.connection_id }, params), { assign_membership_on_login: conn.assign_membership_on_login })
                .catch(() => {
                throw new Error(`Problem updating Enabled Connection ${conn.connection_id} for organizations ${params.id}`);
            })));
            yield Promise.all(connectionsToAdd.map((conn) => this.client.organizations
                .addEnabledConnection(params, lodash_1.default.omit(conn, 'connection'))
                .catch(() => {
                throw new Error(`Problem adding Enabled Connection ${conn.connection_id} for organizations ${params.id}`);
            })));
            yield Promise.all(connectionsToRemove.map((conn) => this.client.organizations
                .removeEnabledConnection(Object.assign({ connection_id: conn.connection_id }, params))
                .catch(() => {
                throw new Error(`Problem removing Enabled Connection ${conn.connection_id} for organizations ${params.id}`);
            })));
            return params;
        });
    }
    updateOrganizations(updates, orgs) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.pool
                .addEachTask({
                data: updates || [],
                generator: (item) => this.updateOrganization(item, orgs)
                    .then((data) => {
                    this.didUpdate(data);
                    this.updated += 1;
                })
                    .catch((err) => {
                    throw new Error(`Problem updating ${this.type} ${this.objString(item)}\n${err}`);
                }),
            })
                .promise();
        });
    }
    getType() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.existing) {
                return this.existing;
            }
            if (!this.client.organizations || typeof this.client.organizations.getAll !== 'function') {
                return [];
            }
            try {
                const organizations = yield this.client.organizations.getAll({
                    checkpoint: true,
                    include_totals: true,
                });
                for (let index = 0; index < organizations.length; index++) {
                    const connections = yield this.client.organizations.connections.get({
                        id: organizations[index].id,
                    });
                    organizations[index].connections = connections;
                }
                this.existing = organizations;
                return this.existing;
            }
            catch (err) {
                if (err.statusCode === 404 || err.statusCode === 501) {
                    return [];
                }
                throw err;
            }
        });
    }
    // Run after connections
    processChanges(assets) {
        return __awaiter(this, void 0, void 0, function* () {
            const { organizations } = assets;
            // Do nothing if not set
            if (!organizations)
                return;
            // Gets organizations from destination tenant
            const existing = yield this.getType();
            const existingConnections = yield this.client.connections.getAll({
                paginate: true,
                include_totals: true,
            });
            // We need to get the connection ids for the names configured so we can link them together
            organizations.forEach((org) => {
                org.connections = (org.connections || [])
                    .map((connection) => {
                    const { name } = connection;
                    delete connection.name;
                    return Object.assign(Object.assign({}, connection), { connection_id: (existingConnections.find((c) => c.name === name) || {}).id });
                })
                    .filter((connection) => !!connection.connection_id);
            });
            const changes = (0, calculateChanges_1.calculateChanges)({
                handler: this,
                assets: organizations,
                existing,
                identifiers: this.identifiers,
                allowDelete: !!this.config('AUTH0_ALLOW_DELETE'),
            });
            logger_1.default.debug(`Start processChanges for organizations [delete:${changes.del.length}] [update:${changes.update.length}], [create:${changes.create.length}]`);
            const myChanges = [
                { del: changes.del },
                { create: changes.create },
                { update: changes.update },
            ];
            yield Promise.all(myChanges.map((change) => __awaiter(this, void 0, void 0, function* () {
                switch (true) {
                    case change.del && change.del.length > 0:
                        yield this.deleteOrganizations(change.del || []);
                        break;
                    case change.create && change.create.length > 0:
                        yield this.createOrganizations(changes.create);
                        break;
                    case change.update && change.update.length > 0:
                        if (change.update)
                            yield this.updateOrganizations(change.update, existing);
                        break;
                    default:
                        break;
                }
            })));
        });
    }
}
__decorate([
    (0, default_1.order)('70')
], OrganizationsHandler.prototype, "processChanges", null);
exports.default = OrganizationsHandler;
//# sourceMappingURL=organizations.js.map