"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.schema = void 0;
const default_1 = __importDefault(require("./default"));
const constants_1 = __importDefault(require("../../constants"));
exports.schema = {
    type: 'object',
    properties: {
        provider: {
            type: 'string',
            enum: constants_1.default.GUARDIAN_PHONE_PROVIDERS,
        },
    },
    additionalProperties: false,
};
const isFeatureUnavailableError = (err) => {
    if (err.statusCode === 404) {
        // Older Management API version where the endpoint is not available.
        return true;
    }
    if (err.statusCode === 403 &&
        err.originalError &&
        err.originalError.response &&
        err.originalError.response.body &&
        err.originalError.response.body.errorCode === 'hooks_not_allowed') {
        // Recent Management API version, but with feature explicitly disabled.
        return true;
    }
    return false;
};
class GuardianPhoneSelectedProviderHandler extends default_1.default {
    constructor(options) {
        super(Object.assign(Object.assign({}, options), { type: 'guardianPhoneFactorSelectedProvider' }));
    }
    getType() {
        return __awaiter(this, void 0, void 0, function* () {
            // in case client version does not support the operation
            if (!this.client.guardian ||
                typeof this.client.guardian.getPhoneFactorSelectedProvider !== 'function') {
                return {};
            }
            if (this.existing)
                return this.existing;
            try {
                this.existing = yield this.client.guardian.getPhoneFactorSelectedProvider();
            }
            catch (e) {
                if (isFeatureUnavailableError(e)) {
                    // Gracefully skip processing this configuration value.
                    return {};
                }
                throw e;
            }
            return this.existing;
        });
    }
    processChanges(assets) {
        return __awaiter(this, void 0, void 0, function* () {
            // No API to delete or create guardianPhoneFactorSelectedProvider, we can only update.
            const { guardianPhoneFactorSelectedProvider } = assets;
            // Do nothing if not set
            if (!guardianPhoneFactorSelectedProvider || !guardianPhoneFactorSelectedProvider.provider)
                return;
            const params = {};
            const data = guardianPhoneFactorSelectedProvider;
            yield this.client.guardian.updatePhoneFactorSelectedProvider(params, data);
            this.updated += 1;
            this.didUpdate(guardianPhoneFactorSelectedProvider);
        });
    }
}
exports.default = GuardianPhoneSelectedProviderHandler;
//# sourceMappingURL=guardianPhoneFactorSelectedProvider.js.map