import DefaultAPIHandler from './default';
import { CalculatedChanges, Asset, Assets } from '../../../types';
import { ConfigFunction } from '../../../configFactory';
export declare const schema: {
    type: string;
    items: {
        type: string;
        properties: {
            name: {
                type: string;
            };
            strategy: {
                type: string;
            };
            options: {
                type: string;
            };
            enabled_clients: {
                type: string;
                items: {
                    type: string;
                };
            };
            realms: {
                type: string;
                items: {
                    type: string;
                };
            };
            metadata: {
                type: string;
            };
        };
        required: string[];
    };
};
export declare const addExcludedConnectionPropertiesToChanges: ({ proposedChanges, existingConnections, config, }: {
    proposedChanges: CalculatedChanges;
    existingConnections: Asset[];
    config: ConfigFunction;
}) => CalculatedChanges;
export default class ConnectionsHandler extends DefaultAPIHandler {
    existing: Asset[] | null;
    constructor(config: DefaultAPIHandler);
    objString(connection: any): string;
    getFormattedOptions(connection: any, clients: any): {
        options: any;
    } | {
        options?: undefined;
    };
    getType(): Promise<Asset[] | null>;
    calcChanges(assets: Assets): Promise<CalculatedChanges>;
    processChanges(assets: Assets): Promise<void>;
}
