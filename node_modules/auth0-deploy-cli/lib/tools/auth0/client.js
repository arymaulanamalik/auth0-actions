"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const promise_pool_executor_1 = require("promise-pool-executor");
const lodash_1 = __importDefault(require("lodash"));
const utils_1 = require("../utils");
const API_CONCURRENCY = 3;
// To ensure a complete deployment, limit the API requests generated to be 80% of the capacity
// https://auth0.com/docs/policies/rate-limits#management-api-v2
const API_FREQUENCY_PER_SECOND = 8;
const MAX_PAGE_SIZE = 100;
function getEntity(rsp) {
    const found = Object.values(rsp).filter((a) => Array.isArray(a));
    if (Array.isArray(found) && found.length === 1) {
        return found[0];
    }
    throw new Error('There was an error trying to find the entity within paginate');
}
function checkpointPaginator(client, target, name) {
    return function (...args) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = [];
            // remove the _checkpoint_ flag
            const _a = lodash_1.default.cloneDeep(args[0]), { checkpoint } = _a, newArgs = __rest(_a, ["checkpoint"]);
            // fetch the total to validate records match
            const { total } = yield client.pool
                .addSingleTask({
                data: newArgs,
                generator: (requestArgs) => target[name](requestArgs),
            })
                .promise();
            let done = false;
            // use checkpoint pagination to allow fetching 1000+ results
            newArgs.take = 50;
            while (!done) {
                const rsp = yield client.pool
                    .addSingleTask({
                    data: newArgs,
                    generator: (requestArgs) => target[name](requestArgs),
                })
                    .promise();
                data.push(...getEntity(rsp));
                if (!rsp.next) {
                    done = true;
                }
                else {
                    newArgs.from = rsp.next;
                }
            }
            if (data.length !== total) {
                throw new Error('Fail to load data from tenant');
            }
            return data;
        });
    };
}
function pagePaginator(client, target, name) {
    return function (...args) {
        return __awaiter(this, void 0, void 0, function* () {
            // Where the entity data will be collected
            const data = [];
            // Create new args and inject the properties we require for pagination automation
            const newArgs = [...args];
            newArgs[0] = Object.assign(Object.assign({}, newArgs[0]), { page: 0 });
            // Grab data we need from the request then delete the keys as they are only needed for this automation function to work
            const perPage = newArgs[0].per_page || MAX_PAGE_SIZE;
            newArgs[0].per_page = perPage;
            delete newArgs[0].paginate;
            // Run the first request to get the total number of entity items
            const rsp = yield client.pool
                .addSingleTask({
                data: lodash_1.default.cloneDeep(newArgs),
                generator: (pageArgs) => target[name](...pageArgs),
            })
                .promise();
            data.push(...getEntity(rsp));
            const total = rsp.total || 0;
            const pagesLeft = Math.ceil(total / perPage) - 1;
            // Setup pool to get the rest of the pages
            if (pagesLeft > 0) {
                const pages = yield client.pool
                    .addEachTask({
                    data: Array.from(Array(pagesLeft).keys()),
                    generator: (page) => {
                        const pageArgs = lodash_1.default.cloneDeep(newArgs);
                        pageArgs[0].page = page + 1;
                        return target[name](...pageArgs).then((r) => getEntity(r));
                    },
                })
                    .promise();
                data.push(...(0, utils_1.flatten)(pages));
                if (data.length !== total) {
                    throw new Error('Fail to load data from tenant');
                }
            }
            return data;
        });
    };
}
// Warp around a <resource>Manager and detect when requesting specific pages to return all
function pagedManager(client, manager) {
    return new Proxy(manager, {
        get: function (target, name, receiver) {
            if (name === 'getAll') {
                return function (...args) {
                    return __awaiter(this, void 0, void 0, function* () {
                        switch (true) {
                            case args[0] && typeof args[0] === 'object' && args[0].checkpoint:
                                return checkpointPaginator(client, target, name)(...args);
                            case args[0] && typeof args[0] === 'object' && args[0].paginate:
                                return pagePaginator(client, target, name)(...args);
                            default:
                                return target[name](...args);
                        }
                    });
                };
            }
            const nestedManager = Reflect.get(target, name, receiver);
            if (typeof nestedManager === 'object' && nestedManager !== null) {
                return pagedManager(client, nestedManager);
            }
            return nestedManager;
        },
    });
}
// Warp around the ManagementClient and detect when requesting specific pages to return all
function pagedClient(client) {
    const clientWithPooling = Object.assign(Object.assign({}, client), { pool: new promise_pool_executor_1.PromisePoolExecutor({
            concurrencyLimit: API_CONCURRENCY,
            frequencyLimit: API_FREQUENCY_PER_SECOND,
            frequencyWindow: 1000, // 1 sec
        }) });
    return pagedManager(clientWithPooling, clientWithPooling);
}
exports.default = pagedClient;
//# sourceMappingURL=client.js.map