"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const tools_1 = require("../../../tools");
const logger_1 = __importDefault(require("../../../logger"));
const utils_1 = require("../../../utils");
function parse(context) {
    return __awaiter(this, void 0, void 0, function* () {
        // Load the HTML file for custom_login_page
        const { clients } = context.assets;
        const clientsFolder = path_1.default.join(context.basePath, tools_1.constants.CLIENTS_DIRECTORY);
        if (!clients) {
            return { clients: null };
        }
        return {
            clients: [
                ...clients.map((client) => {
                    if (client.custom_login_page) {
                        const htmlFileName = path_1.default.join(clientsFolder, client.custom_login_page);
                        if ((0, utils_1.isFile)(htmlFileName)) {
                            client.custom_login_page = context.loadFile(htmlFileName);
                        }
                    }
                    return client;
                }),
            ],
        };
    });
}
function dump(context) {
    return __awaiter(this, void 0, void 0, function* () {
        // Save custom_login_page to a separate html file
        const clientsFolder = path_1.default.join(context.basePath, tools_1.constants.CLIENTS_DIRECTORY);
        const { clients } = context.assets;
        if (!clients)
            return { clients: null };
        return {
            clients: [
                ...clients.map((client) => {
                    if (client.custom_login_page) {
                        const clientName = (0, utils_1.sanitize)(client.name);
                        const html = client.custom_login_page;
                        const customLoginHtml = path_1.default.join(clientsFolder, `${clientName}_custom_login_page.html`);
                        logger_1.default.info(`Writing ${customLoginHtml}`);
                        fs_extra_1.default.ensureDirSync(clientsFolder);
                        fs_extra_1.default.writeFileSync(customLoginHtml, html);
                        client.custom_login_page = `./${clientName}_custom_login_page.html`;
                    }
                    return (0, utils_1.clearClientArrays)(client);
                }),
            ],
        };
    });
}
const clientsHandler = {
    parse,
    dump,
};
exports.default = clientsHandler;
//# sourceMappingURL=clients.js.map