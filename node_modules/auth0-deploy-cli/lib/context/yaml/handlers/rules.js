"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const utils_1 = require("../../../utils");
const logger_1 = __importDefault(require("../../../logger"));
function parse(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const { rules } = context.assets;
        if (!rules)
            return { rules: null };
        return {
            rules: [
                ...rules.map((rule) => (Object.assign(Object.assign({}, rule), { script: context.loadFile(rule.script) }))),
            ],
        };
    });
}
function dump(context) {
    return __awaiter(this, void 0, void 0, function* () {
        let { rules } = context.assets;
        if (!rules) {
            return { rules: null };
        }
        // Create Rules folder
        const rulesFolder = path_1.default.join(context.basePath, 'rules');
        fs_extra_1.default.ensureDirSync(rulesFolder);
        rules = rules.map((rule) => {
            // Dump rule to file
            const scriptName = (0, utils_1.sanitize)(`${rule.name}.js`);
            const scriptFile = path_1.default.join(rulesFolder, scriptName);
            logger_1.default.info(`Writing ${scriptFile}`);
            fs_extra_1.default.writeFileSync(scriptFile, rule.script);
            return Object.assign(Object.assign({}, rule), { script: `./rules/${scriptName}` });
        });
        return { rules };
    });
}
const rulesHandler = {
    parse,
    dump,
};
exports.default = rulesHandler;
//# sourceMappingURL=rules.js.map