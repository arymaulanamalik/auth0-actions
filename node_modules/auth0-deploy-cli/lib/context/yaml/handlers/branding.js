"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const tools_1 = require("../../../tools");
function parse(context) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!context.assets.branding)
            return { branding: null };
        const _a = context.assets.branding, { templates } = _a, branding = __rest(_a, ["templates"]);
        if (!templates) {
            return { branding: Object.assign({}, branding) };
        }
        const parsedTemplates = templates.map((templateDefinition) => {
            const markupFile = path_1.default.join(context.basePath, templateDefinition.body);
            return {
                template: templateDefinition.template,
                body: (0, tools_1.loadFileAndReplaceKeywords)(markupFile, {
                    mappings: context.mappings,
                    disableKeywordReplacement: context.disableKeywordReplacement,
                }),
            };
        });
        return {
            branding: Object.assign(Object.assign({}, branding), { templates: parsedTemplates }),
        };
    });
}
function dump(context) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!context.assets.branding)
            return { branding: null };
        const _a = context.assets.branding, { templates: templateConfig } = _a, branding = __rest(_a, ["templates"]);
        let templates = templateConfig || [];
        // create templates folder
        if (templates.length) {
            const brandingTemplatesFolder = path_1.default.join(context.basePath, tools_1.constants.BRANDING_TEMPLATES_YAML_DIRECTORY);
            fs_extra_1.default.ensureDirSync(brandingTemplatesFolder);
            templates = templates.map((templateDefinition) => {
                const file = `${templateDefinition.template}.html`;
                const templateMarkupFile = path_1.default.join(brandingTemplatesFolder, file);
                const markup = templateDefinition.body;
                try {
                    fs_extra_1.default.writeFileSync(templateMarkupFile, markup);
                }
                catch (e) {
                    throw new Error(`Error writing template file: ${templateDefinition.template}, because: ${e.message}`);
                }
                // save the location as relative file.
                templateDefinition.body = `.${path_1.default.sep}${path_1.default.join(tools_1.constants.BRANDING_TEMPLATES_YAML_DIRECTORY, file)}`;
                return templateDefinition;
            });
        }
        return { branding: Object.assign({ templates }, branding) };
    });
}
const brandingHandler = {
    parse,
    dump,
};
exports.default = brandingHandler;
//# sourceMappingURL=branding.js.map