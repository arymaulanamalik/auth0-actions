"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../../utils");
const sessionDurationsToMinutes_1 = require("../../../sessionDurationsToMinutes");
function parse(context) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!context.assets.tenant)
            return { tenant: null };
        /* eslint-disable camelcase */
        const _a = context.assets.tenant, { session_lifetime, idle_session_lifetime } = _a, tenant = __rest(_a, ["session_lifetime", "idle_session_lifetime"]);
        (0, utils_1.clearTenantFlags)(tenant);
        const sessionDurations = (0, sessionDurationsToMinutes_1.sessionDurationsToMinutes)({ session_lifetime, idle_session_lifetime });
        return {
            tenant: Object.assign(Object.assign({}, tenant), sessionDurations),
        };
    });
}
function dump(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const tenant = context.assets.tenant;
        if (!tenant)
            return { tenant: null };
        (0, utils_1.clearTenantFlags)(tenant);
        return { tenant };
    });
}
const tenantHandler = {
    parse,
    dump,
};
exports.default = tenantHandler;
//# sourceMappingURL=tenant.js.map