"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const logger_1 = __importDefault(require("../../../logger"));
function parse(context) {
    return __awaiter(this, void 0, void 0, function* () {
        // Load the HTML file for each page
        const { emailTemplates } = context.assets;
        if (!emailTemplates)
            return { emailTemplates: null };
        return {
            emailTemplates: [
                ...emailTemplates.map((et) => (Object.assign(Object.assign({}, et), { body: context.loadFile(et.body) }))),
            ],
        };
    });
}
function dump(context) {
    return __awaiter(this, void 0, void 0, function* () {
        let emailTemplates = context.assets.emailTemplates;
        if (!emailTemplates) {
            return { emailTemplates: null };
        }
        // Create Templates folder
        const templatesFolder = path_1.default.join(context.basePath, 'emailTemplates');
        fs_extra_1.default.ensureDirSync(templatesFolder);
        emailTemplates = emailTemplates.map((template) => {
            // Dump template to file
            const templateFile = path_1.default.join(templatesFolder, `${template.template}.html`);
            logger_1.default.info(`Writing ${templateFile}`);
            fs_extra_1.default.writeFileSync(templateFile, template.body);
            return Object.assign(Object.assign({}, template), { body: `./emailTemplates/${template.template}.html` });
        });
        return { emailTemplates };
    });
}
const emailTemplatesHandler = {
    parse,
    dump,
};
exports.default = emailTemplatesHandler;
//# sourceMappingURL=emailTemplates.js.map