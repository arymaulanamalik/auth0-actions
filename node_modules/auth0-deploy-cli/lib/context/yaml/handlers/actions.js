"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable consistent-return */
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const tools_1 = require("../../../tools");
const utils_1 = require("../../../utils");
const logger_1 = __importDefault(require("../../../logger"));
const actions_1 = require("../../../tools/auth0/handlers/actions");
function parseCode(context, code) {
    if (code) {
        //@ts-ignore TODO: understand why two arguments are passed when context.loadFile only accepts one
        return context.loadFile(code, tools_1.constants.ACTIONS_DIRECTORY);
    }
}
function parse(context) {
    return __awaiter(this, void 0, void 0, function* () {
        // Load the script file for each action
        const { actions } = context.assets;
        if (!actions)
            return { actions: null };
        return {
            actions: [
                ...actions.map((action) => (Object.assign(Object.assign({}, action), { code: parseCode(context, action.code || '') }))),
            ],
        };
    });
}
function mapSecrets(secrets) {
    if (secrets && secrets.length > 0) {
        return secrets.map((secret) => ({ name: secret.name, value: secret.value }));
    }
    return [];
}
function mapActionCode(basePath, action) {
    const { code } = action;
    if (!code) {
        return '';
    }
    const actionName = (0, utils_1.sanitize)(action.name);
    const actionVersionsFolder = path_1.default.join(basePath, tools_1.constants.ACTIONS_DIRECTORY, actionName);
    fs_extra_1.default.ensureDirSync(actionVersionsFolder);
    const codeFile = path_1.default.join(actionVersionsFolder, 'code.js');
    logger_1.default.info(`Writing ${codeFile}`);
    fs_extra_1.default.writeFileSync(codeFile, code);
    return `./${tools_1.constants.ACTIONS_DIRECTORY}/${actionName}/code.js`;
}
function dump(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const { actions } = context.assets;
        if (!actions)
            return { actions: null };
        // Marketplace actions are not currently supported for management (See ESD-23225)
        const filteredActions = actions.filter((action) => {
            if ((0, actions_1.isMarketplaceAction)(action)) {
                logger_1.default.warn(`Skipping export of marketplace action "${action.name}". Management of marketplace actions are not currently supported.`);
                return false;
            }
            return true;
        });
        return {
            actions: filteredActions.map((action) => ({
                name: action.name,
                deployed: !!action.deployed || !!action.all_changes_deployed,
                //@ts-ignore because Action resource needs to be typed more accurately
                code: mapActionCode(context.basePath, action),
                runtime: action.runtime,
                dependencies: action.dependencies || [],
                status: action.status,
                secrets: typeof action.secrets === 'string' ? action.secrets : mapSecrets(action.secrets || []),
                supported_triggers: action.supported_triggers,
            })),
        };
    });
}
const ActionsHandler = {
    parse,
    dump,
};
exports.default = ActionsHandler;
//# sourceMappingURL=actions.js.map