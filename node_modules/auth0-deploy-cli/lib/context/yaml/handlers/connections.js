"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const tools_1 = require("../../../tools");
const logger_1 = __importDefault(require("../../../logger"));
const utils_1 = require("../../../utils");
function parse(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const { connections } = context.assets;
        const connectionsFolder = path_1.default.join(context.basePath, tools_1.constants.CONNECTIONS_DIRECTORY);
        if (!connections) {
            return { connections: null };
        }
        return {
            connections: [
                ...connections.map((connection) => {
                    if (connection.strategy === 'email') {
                        (0, utils_1.ensureProp)(connection, 'options.email.body');
                        const htmlFileName = path_1.default.join(connectionsFolder, connection.options.email.body);
                        if (!(0, utils_1.isFile)(htmlFileName)) {
                            const missingTemplateErrorMessage = `Passwordless email template purportedly located at ${htmlFileName} does not exist for connection. Ensure the existence of this file to proceed with deployment.`;
                            logger_1.default.error(missingTemplateErrorMessage);
                            throw new Error(missingTemplateErrorMessage);
                        }
                        connection.options.email.body = context.loadFile(htmlFileName);
                    }
                    return connection;
                }),
            ],
        };
    });
}
const getFormattedOptions = (connection, clients) => {
    try {
        return {
            options: Object.assign(Object.assign({}, connection.options), { idpinitiated: Object.assign(Object.assign({}, connection.options.idpinitiated), { client_id: (0, utils_1.convertClientIdToName)(connection.options.idpinitiated.client_id, clients) }) }),
        };
    }
    catch (e) {
        return {};
    }
};
function dump(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const { connections, clients } = context.assets;
        if (!connections)
            return { connections: null };
        return {
            connections: connections.map((connection) => {
                const dumpedConnection = Object.assign(Object.assign(Object.assign({}, connection), getFormattedOptions(connection, clients)), (connection.enabled_clients && {
                    enabled_clients: (0, utils_1.mapClientID2NameSorted)(connection.enabled_clients, clients || []),
                }));
                if (dumpedConnection.strategy === 'email') {
                    (0, utils_1.ensureProp)(connection, 'options.email.body');
                    const connectionsFolder = path_1.default.join(context.basePath, tools_1.constants.CONNECTIONS_DIRECTORY);
                    const connectionName = (0, utils_1.sanitize)(dumpedConnection.name);
                    const html = dumpedConnection.options.email.body;
                    const emailConnectionHtml = path_1.default.join(connectionsFolder, `${connectionName}.html`);
                    logger_1.default.info(`Writing ${emailConnectionHtml}`);
                    fs_extra_1.default.ensureDirSync(connectionsFolder);
                    fs_extra_1.default.writeFileSync(emailConnectionHtml, html);
                    dumpedConnection.options.email.body = `./${connectionName}.html`;
                }
                return dumpedConnection;
            }),
        };
    });
}
const connectionsHandler = {
    parse,
    dump,
};
exports.default = connectionsHandler;
//# sourceMappingURL=connections.js.map