"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const tools_1 = require("../../../tools");
const logger_1 = __importDefault(require("../../../logger"));
const utils_1 = require("../../../utils");
const fs_1 = require("fs");
function parse(context) {
    const emailsFolder = path_1.default.join(context.filePath, tools_1.constants.EMAIL_TEMPLATES_DIRECTORY);
    if (!(0, utils_1.existsMustBeDir)(emailsFolder))
        return { emailTemplates: null }; // Skip
    const jsonFiles = (0, utils_1.getFiles)(emailsFolder, ['.json']).filter((f) => path_1.default.basename(f) !== 'provider.json');
    const emailTemplates = jsonFiles.flatMap((filePath) => {
        const meta = (0, utils_1.loadJSON)(filePath, {
            mappings: context.mappings,
            disableKeywordReplacement: context.disableKeywordReplacement,
        });
        const templateFilePath = (() => {
            if (meta.body !== undefined) {
                const explicitlyDefinedPath = path_1.default.join(emailsFolder, meta.body);
                if ((0, fs_1.existsSync)(explicitlyDefinedPath))
                    return explicitlyDefinedPath;
            }
            const defaultPath = path_1.default.join(emailsFolder, path_1.default.parse(filePath).name + '.html');
            if ((0, fs_1.existsSync)(defaultPath))
                return defaultPath;
            return null;
        })();
        if (templateFilePath === null) {
            logger_1.default.warn(`Skipping email template file ${meta.body} as missing the corresponding '.json' file`);
            return [];
        }
        return Object.assign(Object.assign({}, meta), { body: (0, tools_1.loadFileAndReplaceKeywords)(templateFilePath, {
                mappings: context.mappings,
                disableKeywordReplacement: context.disableKeywordReplacement,
            }) });
    });
    return {
        emailTemplates,
    };
}
function dump(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const emailTemplates = context.assets.emailTemplates;
        if (!emailTemplates)
            return; // Skip, nothing to dump
        // Create Templates folder
        const templatesFolder = path_1.default.join(context.filePath, tools_1.constants.EMAIL_TEMPLATES_DIRECTORY);
        fs_extra_1.default.ensureDirSync(templatesFolder);
        emailTemplates.forEach((template) => {
            // Dump template html to file
            const templateHtml = path_1.default.join(templatesFolder, `${template.template}.html`);
            logger_1.default.info(`Writing ${templateHtml}`);
            fs_extra_1.default.writeFileSync(templateHtml, template.body);
            // Dump template metadata
            const templateFile = path_1.default.join(templatesFolder, `${template.template}.json`);
            (0, utils_1.dumpJSON)(templateFile, Object.assign(Object.assign({}, template), { body: `./${template.template}.html` }));
        });
    });
}
const emailTemplatesHandler = {
    parse,
    dump,
};
exports.default = emailTemplatesHandler;
//# sourceMappingURL=emailTemplates.js.map