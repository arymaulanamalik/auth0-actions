"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const tools_1 = require("../../../tools");
const logger_1 = __importDefault(require("../../../logger"));
const utils_1 = require("../../../utils");
function parse(context) {
    const rolesFolder = path_1.default.join(context.filePath, tools_1.constants.ROLES_DIRECTORY);
    if (!(0, utils_1.existsMustBeDir)(rolesFolder))
        return { roles: null }; // Skip
    const files = (0, utils_1.getFiles)(rolesFolder, ['.json']);
    const roles = files.map((f) => {
        const role = Object.assign({}, (0, utils_1.loadJSON)(f, {
            mappings: context.mappings,
            disableKeywordReplacement: context.disableKeywordReplacement,
        }));
        return role;
    });
    return {
        roles,
    };
}
function dump(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const { roles } = context.assets;
        // API returns an empty object if no grants are present
        if (!roles || roles.constructor === Object)
            return; // Skip, nothing to dump
        const rolesFolder = path_1.default.join(context.filePath, tools_1.constants.ROLES_DIRECTORY);
        fs_extra_1.default.ensureDirSync(rolesFolder);
        roles.forEach((role) => {
            const roleFile = path_1.default.join(rolesFolder, (0, utils_1.sanitize)(`${role.name}.json`));
            logger_1.default.info(`Writing ${roleFile}`);
            // remove empty description
            if (role.description === null) {
                delete role.description;
            }
            (0, utils_1.dumpJSON)(roleFile, role);
        });
    });
}
const rolesHandler = {
    parse,
    dump,
};
exports.default = rolesHandler;
//# sourceMappingURL=roles.js.map