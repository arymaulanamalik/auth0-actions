"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = require("fs-extra");
const utils_1 = require("../../../utils");
const tools_1 = require("../../../tools");
function parse(context) {
    const baseFolder = path_1.default.join(context.filePath, tools_1.constants.THEMES_DIRECTORY);
    if (!(0, utils_1.existsMustBeDir)(baseFolder)) {
        return { themes: null };
    }
    const themeDefinitionsFiles = (0, utils_1.getFiles)(baseFolder, ['.json']);
    if (!themeDefinitionsFiles.length) {
        return { themes: [] };
    }
    const themes = themeDefinitionsFiles.map((themeDefinitionsFile) => (0, utils_1.loadJSON)(themeDefinitionsFile, {
        mappings: context.mappings,
        disableKeywordReplacement: context.disableKeywordReplacement,
    }));
    return { themes };
}
function dump(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const { themes } = context.assets;
        if (!themes) {
            return;
        }
        const baseFolder = path_1.default.join(context.filePath, tools_1.constants.THEMES_DIRECTORY);
        (0, fs_extra_1.ensureDirSync)(baseFolder);
        themes.forEach((themeDefinition, i) => {
            (0, utils_1.dumpJSON)(path_1.default.join(baseFolder, `theme${i ? i : ''}.json`), themeDefinition);
        });
    });
}
const themesHandler = {
    parse,
    dump,
};
exports.default = themesHandler;
//# sourceMappingURL=themes.js.map