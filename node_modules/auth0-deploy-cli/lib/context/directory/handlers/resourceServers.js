"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const tools_1 = require("../../../tools");
const utils_1 = require("../../../utils");
function parse(context) {
    const resourceServersFolder = path_1.default.join(context.filePath, tools_1.constants.RESOURCE_SERVERS_DIRECTORY);
    if (!(0, utils_1.existsMustBeDir)(resourceServersFolder))
        return { resourceServers: null }; // Skip
    const foundFiles = (0, utils_1.getFiles)(resourceServersFolder, ['.json']);
    const resourceServers = foundFiles
        .map((f) => (0, utils_1.loadJSON)(f, {
        mappings: context.mappings,
        disableKeywordReplacement: context.disableKeywordReplacement,
    }))
        .filter((p) => Object.keys(p).length > 0); // Filter out empty resourceServers
    return {
        resourceServers,
    };
}
function dump(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const { resourceServers } = context.assets;
        if (!resourceServers)
            return; // Skip, nothing to dump
        const resourceServersFolder = path_1.default.join(context.filePath, tools_1.constants.RESOURCE_SERVERS_DIRECTORY);
        fs_extra_1.default.ensureDirSync(resourceServersFolder);
        resourceServers.forEach((resourceServer) => {
            const resourceServerFile = path_1.default.join(resourceServersFolder, (0, utils_1.sanitize)(`${resourceServer.name}.json`));
            (0, utils_1.dumpJSON)(resourceServerFile, resourceServer);
        });
    });
}
const resourceServersHandler = {
    parse,
    dump,
};
exports.default = resourceServersHandler;
//# sourceMappingURL=resourceServers.js.map