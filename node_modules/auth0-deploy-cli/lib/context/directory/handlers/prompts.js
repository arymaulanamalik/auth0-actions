"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = require("fs-extra");
const tools_1 = require("../../../tools");
const utils_1 = require("../../../utils");
const getPromptsDirectory = (filePath) => {
    return path_1.default.join(filePath, tools_1.constants.PROMPTS_DIRECTORY);
};
const getPromptsSettingsFile = (promptsDirectory) => {
    return path_1.default.join(promptsDirectory, 'prompts.json');
};
const getCustomTextFile = (promptsDirectory) => {
    return path_1.default.join(promptsDirectory, 'custom-text.json');
};
function parse(context) {
    const promptsDirectory = getPromptsDirectory(context.filePath);
    if (!(0, utils_1.existsMustBeDir)(promptsDirectory))
        return { prompts: null }; // Skip
    const promptsSettings = (() => {
        const promptsSettingsFile = getPromptsSettingsFile(promptsDirectory);
        if (!(0, utils_1.isFile)(promptsSettingsFile))
            return {};
        return (0, utils_1.loadJSON)(promptsSettingsFile, {
            mappings: context.mappings,
            disableKeywordReplacement: context.disableKeywordReplacement,
        });
    })();
    const customText = (() => {
        const customTextFile = getCustomTextFile(promptsDirectory);
        if (!(0, utils_1.isFile)(customTextFile))
            return {};
        return (0, utils_1.loadJSON)(customTextFile, {
            mappings: context.mappings,
            disableKeywordReplacement: context.disableKeywordReplacement,
        });
    })();
    return {
        prompts: Object.assign(Object.assign({}, promptsSettings), { customText }),
    };
}
function dump(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const { prompts } = context.assets;
        if (!prompts)
            return;
        const { customText } = prompts, promptsSettings = __rest(prompts, ["customText"]);
        const promptsDirectory = getPromptsDirectory(context.filePath);
        (0, fs_extra_1.ensureDirSync)(promptsDirectory);
        if (!promptsSettings)
            return;
        const promptsSettingsFile = getPromptsSettingsFile(promptsDirectory);
        (0, utils_1.dumpJSON)(promptsSettingsFile, promptsSettings);
        if (!customText)
            return;
        const customTextFile = getCustomTextFile(promptsDirectory);
        (0, utils_1.dumpJSON)(customTextFile, customText);
    });
}
const promptsHandler = {
    parse,
    dump,
};
exports.default = promptsHandler;
//# sourceMappingURL=prompts.js.map