"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const tools_1 = require("../../../tools");
const logger_1 = __importDefault(require("../../../logger"));
const utils_1 = require("../../../utils");
function parse(context) {
    const pagesFolder = path_1.default.join(context.filePath, tools_1.constants.PAGES_DIRECTORY);
    if (!(0, utils_1.existsMustBeDir)(pagesFolder))
        return { pages: null }; // Skip
    const files = (0, utils_1.getFiles)(pagesFolder, ['.json', '.html']);
    const sorted = files.reduce((acc, file) => {
        const { ext, name } = path_1.default.parse(file);
        if (!acc[name])
            acc[name] = {};
        if (ext === '.json')
            acc[name].meta = file;
        if (ext === '.html')
            acc[name].html = file;
        return acc;
    }, {});
    const pages = Object.keys(sorted).flatMap((key) => {
        const { meta, html } = sorted[key];
        if (!meta) {
            logger_1.default.warn(`Skipping pages file ${html} as missing the corresponding '.json' file`);
            return [];
        }
        if (!html && ['error_page', 'login'].includes(key)) {
            //Error pages don't require an HTML template, it is valid to redirect errors to URL
            return Object.assign(Object.assign({}, (0, utils_1.loadJSON)(meta, {
                mappings: context.mappings,
                disableKeywordReplacement: context.disableKeywordReplacement,
            })), { html: '' });
        }
        if (!html) {
            logger_1.default.warn(`Skipping pages file ${meta} as missing corresponding '.html' file`);
            return [];
        }
        return Object.assign(Object.assign({}, (0, utils_1.loadJSON)(meta, {
            mappings: context.mappings,
            disableKeywordReplacement: context.disableKeywordReplacement,
        })), { html: (0, tools_1.loadFileAndReplaceKeywords)(html, {
                mappings: context.mappings,
                disableKeywordReplacement: context.disableKeywordReplacement,
            }) });
    });
    return {
        pages,
    };
}
function dump(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const pages = context.assets.pages;
        if (!pages)
            return;
        const pagesFolder = path_1.default.join(context.filePath, tools_1.constants.PAGES_DIRECTORY);
        fs_extra_1.default.ensureDirSync(pagesFolder);
        pages.forEach((page) => {
            const metadata = Object.assign({}, page);
            if (page.html !== undefined) {
                const htmlFile = path_1.default.join(pagesFolder, `${page.name}.html`);
                logger_1.default.info(`Writing ${htmlFile}`);
                fs_extra_1.default.writeFileSync(htmlFile, page.html);
                metadata.html = `./${page.name}.html`;
            }
            const pageFile = path_1.default.join(pagesFolder, `${page.name}.json`);
            (0, utils_1.dumpJSON)(pageFile, metadata);
        });
    });
}
const pagesHandler = {
    parse,
    dump,
};
exports.default = pagesHandler;
//# sourceMappingURL=pages.js.map