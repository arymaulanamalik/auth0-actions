"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const tools_1 = require("../../../tools");
const utils_1 = require("../../../utils");
function attackProtectionFiles(filePath) {
    const directory = path_1.default.join(filePath, tools_1.constants.ATTACK_PROTECTION_DIRECTORY);
    return {
        directory: directory,
        breachedPasswordDetection: path_1.default.join(directory, 'breached-password-detection.json'),
        bruteForceProtection: path_1.default.join(directory, 'brute-force-protection.json'),
        suspiciousIpThrottling: path_1.default.join(directory, 'suspicious-ip-throttling.json'),
    };
}
function parse(context) {
    const files = attackProtectionFiles(context.filePath);
    if (!(0, utils_1.existsMustBeDir)(files.directory)) {
        return {
            attackProtection: null,
        };
    }
    const breachedPasswordDetection = (0, utils_1.loadJSON)(files.breachedPasswordDetection, {
        mappings: context.mappings,
        disableKeywordReplacement: context.disableKeywordReplacement,
    });
    const bruteForceProtection = (0, utils_1.loadJSON)(files.bruteForceProtection, {
        mappings: context.mappings,
        disableKeywordReplacement: context.disableKeywordReplacement,
    });
    const suspiciousIpThrottling = (0, utils_1.loadJSON)(files.suspiciousIpThrottling, {
        mappings: context.mappings,
        disableKeywordReplacement: context.disableKeywordReplacement,
    });
    return {
        attackProtection: {
            breachedPasswordDetection,
            bruteForceProtection,
            suspiciousIpThrottling,
        },
    };
}
function dump(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const { attackProtection } = context.assets;
        if (!attackProtection)
            return;
        const files = attackProtectionFiles(context.filePath);
        fs_extra_1.default.ensureDirSync(files.directory);
        (0, utils_1.dumpJSON)(files.breachedPasswordDetection, attackProtection.breachedPasswordDetection);
        (0, utils_1.dumpJSON)(files.bruteForceProtection, attackProtection.bruteForceProtection);
        (0, utils_1.dumpJSON)(files.suspiciousIpThrottling, attackProtection.suspiciousIpThrottling);
    });
}
const attackProtectionHandler = {
    parse,
    dump,
};
exports.default = attackProtectionHandler;
//# sourceMappingURL=attackProtection.js.map