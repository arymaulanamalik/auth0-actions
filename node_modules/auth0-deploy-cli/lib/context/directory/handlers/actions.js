"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable consistent-return */
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const tools_1 = require("../../../tools");
const utils_1 = require("../../../utils");
const logger_1 = __importDefault(require("../../../logger"));
const actions_1 = require("../../../tools/auth0/handlers/actions");
function parse(context) {
    const actionsFolder = path_1.default.join(context.filePath, tools_1.constants.ACTIONS_DIRECTORY);
    if (!(0, utils_1.existsMustBeDir)(actionsFolder))
        return { actions: null }; // Skip
    const files = (0, utils_1.getFiles)(actionsFolder, ['.json']);
    const actions = files.map((file) => {
        const action = Object.assign({}, (0, utils_1.loadJSON)(file, {
            mappings: context.mappings,
            disableKeywordReplacement: context.disableKeywordReplacement,
        }));
        const actionFolder = path_1.default.join(tools_1.constants.ACTIONS_DIRECTORY, `${action.name}`);
        if (action.code) {
            const toUnixPath = (somePath) => somePath.replace(/[\\/]+/g, '/').replace(/^([a-zA-Z]+:|\.\/)/, '');
            action.code = context.loadFile(toUnixPath(action.code), actionFolder);
        }
        return action;
    });
    return { actions };
}
function mapSecrets(secrets) {
    if (secrets && secrets.length > 0) {
        return secrets.map((secret) => ({ name: secret.name, value: secret.value }));
    }
    return [];
}
function mapActionCode(filePath, action) {
    const { code } = action;
    if (!code) {
        return '';
    }
    const actionName = (0, utils_1.sanitize)(action.name);
    const actionFolder = path_1.default.join(filePath, tools_1.constants.ACTIONS_DIRECTORY, `${actionName}`);
    fs_extra_1.default.ensureDirSync(actionFolder);
    const codeFile = path_1.default.join(actionFolder, 'code.js');
    logger_1.default.info(`Writing ${codeFile}`);
    fs_extra_1.default.writeFileSync(codeFile, code);
    return `${codeFile}`;
}
function mapToAction(filePath, action) {
    return {
        name: action.name,
        code: mapActionCode(filePath, action),
        runtime: action.runtime,
        status: action.status,
        dependencies: action.dependencies,
        secrets: mapSecrets(action.secrets),
        supported_triggers: action.supported_triggers,
        deployed: action.deployed || action.all_changes_deployed,
        installed_integration_id: action.installed_integration_id,
    };
}
function dump(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const { actions } = context.assets;
        if (!actions)
            return;
        // Marketplace actions are not currently supported for management (See ESD-23225)
        const filteredActions = actions.filter((action) => {
            if ((0, actions_1.isMarketplaceAction)(action)) {
                logger_1.default.warn(`Skipping export of marketplace action "${action.name}". Management of marketplace actions are not currently supported.`);
                return false;
            }
            return true;
        });
        // Create Actions folder
        const actionsFolder = path_1.default.join(context.filePath, tools_1.constants.ACTIONS_DIRECTORY);
        fs_extra_1.default.ensureDirSync(actionsFolder);
        filteredActions.forEach((action) => {
            // Dump template metadata
            const name = (0, utils_1.sanitize)(action.name);
            const actionFile = path_1.default.join(actionsFolder, `${name}.json`);
            logger_1.default.info(`Writing ${actionFile}`);
            fs_extra_1.default.writeFileSync(actionFile, JSON.stringify(mapToAction(context.filePath, action), null, 2));
        });
    });
}
const actionsHandler = {
    parse,
    dump,
};
exports.default = actionsHandler;
//# sourceMappingURL=actions.js.map