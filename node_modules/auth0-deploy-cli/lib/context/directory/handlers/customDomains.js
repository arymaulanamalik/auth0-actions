"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const tools_1 = require("../../../tools");
const utils_1 = require("../../../utils");
const getCustomDomainsDirectory = (filePath) => path_1.default.join(filePath, tools_1.constants.CUSTOM_DOMAINS_DIRECTORY);
const getCustomDomainsFile = (filePath) => path_1.default.join(getCustomDomainsDirectory(filePath), 'custom-domains.json');
function parse(context) {
    const customDomainsDirectory = getCustomDomainsDirectory(context.filePath);
    if (!(0, utils_1.existsMustBeDir)(customDomainsDirectory))
        return { customDomains: null }; // Skip
    const customDomainsFile = getCustomDomainsFile(context.filePath);
    return {
        customDomains: (0, utils_1.loadJSON)(customDomainsFile, {
            mappings: context.mappings,
            disableKeywordReplacement: context.disableKeywordReplacement,
        }),
    };
}
function dump(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const { customDomains } = context.assets;
        if (!customDomains)
            return; // Skip, nothing to dump
        // Create Rules folder
        const customDomainsDirectory = getCustomDomainsDirectory(context.filePath);
        fs_extra_1.default.ensureDirSync(customDomainsDirectory);
        const customDomainsFile = getCustomDomainsFile(context.filePath);
        (0, utils_1.dumpJSON)(customDomainsFile, customDomains);
    });
}
const customDomainsHandler = {
    parse,
    dump,
};
exports.default = customDomainsHandler;
//# sourceMappingURL=customDomains.js.map