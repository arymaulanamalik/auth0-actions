"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const logger_1 = __importDefault(require("../../../logger"));
const utils_1 = require("../../../utils");
function parse(context) {
    const organizationsFolder = path_1.default.join(context.filePath, 'organizations');
    if (!(0, utils_1.existsMustBeDir)(organizationsFolder))
        return { organizations: null }; // Skip
    const files = (0, utils_1.getFiles)(organizationsFolder, ['.json']);
    const organizations = files.map((f) => {
        const org = Object.assign({}, (0, utils_1.loadJSON)(f, {
            mappings: context.mappings,
            disableKeywordReplacement: context.disableKeywordReplacement,
        }));
        return org;
    });
    return {
        organizations,
    };
}
function dump(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const { organizations } = context.assets;
        // API returns an empty object if no grants are present
        if (!organizations || organizations.constructor === Object)
            return; // Skip, nothing to dump
        const organizationsFolder = path_1.default.join(context.filePath, 'organizations');
        fs_extra_1.default.ensureDirSync(organizationsFolder);
        organizations.forEach((organization) => {
            const organizationFile = path_1.default.join(organizationsFolder, (0, utils_1.sanitize)(`${organization.name}.json`));
            logger_1.default.info(`Writing ${organizationFile}`);
            if (organization.connections.length > 0) {
                organization.connections = organization.connections.map((c) => {
                    // connection is a computed field
                    const name = c.connection && c.connection.name;
                    const conn = Object.assign({ name }, c);
                    delete conn.connection_id;
                    delete conn.connection;
                    return conn;
                });
            }
            (0, utils_1.dumpJSON)(organizationFile, organization);
        });
    });
}
const organizationsHandler = {
    parse,
    dump,
};
exports.default = organizationsHandler;
//# sourceMappingURL=organizations.js.map