"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const nconf_1 = __importDefault(require("nconf"));
const mkdirp_1 = __importDefault(require("mkdirp"));
const logger_1 = __importDefault(require("../logger"));
const utils_1 = require("../utils");
const index_1 = require("../context/index");
function exportCMD(params) {
    return __awaiter(this, void 0, void 0, function* () {
        const { output_folder: outputFolder, base_path: basePath, config_file: configFile, config: configObj, export_ids: exportIds, secret: clientSecret, env: shouldInheritEnv = false, } = params;
        if (shouldInheritEnv) {
            nconf_1.default.env().use('memory');
        }
        if (configFile) {
            nconf_1.default.file(configFile);
        }
        const overrides = Object.assign({ AUTH0_INPUT_FILE: outputFolder, AUTH0_BASE_PATH: basePath }, (configObj || {}));
        // Prepare configuration by initializing nconf, then passing that as the provider to the config object
        // Allow passed in secret to override the configured one
        if (clientSecret) {
            overrides.AUTH0_CLIENT_SECRET = clientSecret;
        }
        // Allow passed in export_ids to override the configured one
        if (exportIds) {
            overrides.AUTH0_EXPORT_IDENTIFIERS = exportIds;
        }
        // Check output folder
        if (!(0, utils_1.isDirectory)(outputFolder)) {
            logger_1.default.info(`Creating ${outputFolder}`);
            mkdirp_1.default.sync(outputFolder);
        }
        if (params.format === 'yaml') {
            overrides.AUTH0_INPUT_FILE = path_1.default.join(outputFolder, 'tenant.yaml');
        }
        nconf_1.default.overrides(overrides);
        // Setup context and load
        const context = yield (0, index_1.setupContext)(nconf_1.default.get(), 'export');
        yield context.dump();
        logger_1.default.info('Export Successful');
    });
}
exports.default = exportCMD;
//# sourceMappingURL=export.js.map