"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nconf_1 = __importDefault(require("nconf"));
const configFactory_1 = require("../configFactory");
const tools_1 = require("../tools");
const logger_1 = __importDefault(require("../logger"));
const context_1 = require("../context");
function importCMD(params) {
    return __awaiter(this, void 0, void 0, function* () {
        const { input_file: inputFile, base_path: basePath, config_file: configFile, config: configObj, env: shouldInheritEnv = false, secret: clientSecret, } = params;
        if (shouldInheritEnv) {
            nconf_1.default.env().use('memory');
            const mappings = nconf_1.default.get('AUTH0_KEYWORD_REPLACE_MAPPINGS') || {};
            nconf_1.default.set('AUTH0_KEYWORD_REPLACE_MAPPINGS', Object.assign(mappings, process.env));
        }
        if (configFile) {
            nconf_1.default.file(configFile);
        }
        const overrides = Object.assign({ AUTH0_INPUT_FILE: inputFile, AUTH0_BASE_PATH: basePath, AUTH0_KEYWORD_REPLACE_MAPPINGS: {} }, (configObj || {}));
        // Prepare configuration by initializing nconf, then passing that as the provider to the config object
        // Allow passed in secret to override the configured one
        if (clientSecret) {
            overrides.AUTH0_CLIENT_SECRET = clientSecret;
        }
        nconf_1.default.overrides(overrides);
        // Setup context and load
        const context = yield (0, context_1.setupContext)(nconf_1.default.get(), 'import');
        yield context.loadAssetsFromLocal();
        const config = (0, configFactory_1.configFactory)();
        config.setProvider((key) => nconf_1.default.get(key));
        //@ts-ignore because context and assets still need to be typed TODO: type assets and type context
        yield (0, tools_1.deploy)(context.assets, context.mgmtClient, config);
        logger_1.default.info('Import Successful');
    });
}
exports.default = importCMD;
//# sourceMappingURL=import.js.map