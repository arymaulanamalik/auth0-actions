#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deploy = exports.dump = void 0;
const global_agent_1 = require("global-agent");
const args_1 = require("./args");
const logger_1 = __importDefault(require("./logger"));
const tools_1 = __importDefault(require("./tools"));
const import_1 = __importDefault(require("./commands/import"));
const export_1 = __importDefault(require("./commands/export"));
function run(params) {
    return __awaiter(this, void 0, void 0, function* () {
        // Run command
        const command = params._[0];
        const proxy = params.proxy_url;
        if (proxy) {
            const MAJOR_NODEJS_VERSION = parseInt(process.version.slice(1).split('.')[0], 10);
            if (MAJOR_NODEJS_VERSION < 10) {
                // `global-agent` works with Node.js v10 and above.
                throw new Error('The --proxy_url option is only supported on Node >= 10');
            }
            process.env.GLOBAL_AGENT_HTTP_PROXY = proxy;
            (0, global_agent_1.bootstrap)();
        }
        logger_1.default.debug(`Start command ${command}`);
        if (['deploy', 'import'].includes(command) && 'input_file' in params) {
            yield (0, import_1.default)(params);
        }
        if (['dump', 'export'].includes(command) && 'output_folder' in params) {
            yield (0, export_1.default)(params);
        }
        logger_1.default.debug(`Finished command ${command}`);
    });
}
// Only run if from command line
if (require.main === module) {
    // Load cli params
    const params = (0, args_1.getParams)();
    logger_1.default.debug('Starting Auth0 Deploy CLI Tool');
    if (params.debug) {
        logger_1.default.level = 'debug';
        // Set for tools
        process.env.AUTH0_DEBUG = 'true';
        process.env.AUTH0_LOG = 'debug';
    }
    run(params)
        .then(() => process.exit(0))
        .catch((error) => {
        const command = params._[0];
        if (error.type || error.stage) {
            logger_1.default.error(`Problem running command ${command} during stage ${error.stage} when processing type ${error.type}`);
        }
        else {
            logger_1.default.error(`Problem running command ${command}`);
        }
        const msg = error.message || error.toString();
        logger_1.default.error(msg);
        if (process.env.AUTH0_DEBUG === 'true' && error.stack) {
            logger_1.default.debug(error.stack);
        }
        if (typeof msg === 'string' && msg.includes('Payload validation error')) {
            logger_1.default.info('Please refer to the Auth0 Management API docs for expected payloads: https://auth0.com/docs/api/management/v2');
        }
        process.exit(1);
    });
}
// Export commands to be used programmatically
exports.default = {
    deploy: import_1.default,
    dump: export_1.default,
    import: import_1.default,
    export: export_1.default,
    tools: tools_1.default,
};
exports.dump = export_1.default;
exports.deploy = import_1.default;
//# sourceMappingURL=index.js.map